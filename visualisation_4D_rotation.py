import pygame as pg
import numpy as np

WIDTH = 1200
HEIGH = 600

def visualisation(angular_rot_speed = None):
    if angular_rot_speed == None:
        angular_rot_speed = (0.005,0.01,0.015,0.003,0.006,0.009)
    pg.init()
    pg.display.set_caption("game")
    font = pg.font.SysFont(None, 24)
    win = pg.display.set_mode((WIDTH, HEIGH))
    run = True
    size = 100
    edges = np.array([
        [[0,0,0,0],[0,0,1,0]],
        [[0,0,0,0],[0,1,0,0]],
        [[0,0,0,0],[1,0,0,0]],
        [[0,0,1,0],[0,1,1,0]],
        [[0,0,1,0],[1,0,1,0]],
        [[0,1,0,0],[0,1,1,0]],
        [[0,1,0,0],[1,1,0,0]],
        [[1,0,0,0],[1,0,1,0]],
        [[1,0,0,0],[1,1,0,0]],
        [[1,1,1,0],[1,1,0,0]],
        [[1,1,1,0],[1,0,1,0]],
        [[1,1,1,0],[0,1,1,0]],

        [[0,0,0,0],[0,0,0,1]],
        [[0,0,0,0],[0,1,0,0]],
        [[0,0,0,0],[1,0,0,0]],
        [[0,0,0,1],[0,1,0,1]],
        [[0,0,0,1],[1,0,0,1]],
        [[0,1,0,0],[0,1,0,1]],
        [[0,1,0,0],[1,1,0,0]],
        [[1,0,0,0],[1,0,0,1]],
        [[1,0,0,0],[1,1,0,0]],
        [[1,1,0,1],[1,1,0,0]],
        [[1,1,0,1],[1,0,0,1]],
        [[1,1,0,1],[0,1,0,1]],

        [[0,0,0,0],[0,0,0,1]],
        [[0,0,0,0],[0,0,1,0]],
        [[0,0,0,0],[1,0,0,0]],
        [[0,0,0,1],[0,0,1,1]],
        [[0,0,0,1],[1,0,0,1]],
        [[0,0,1,0],[0,0,1,1]],
        [[0,0,1,0],[1,0,1,0]],
        [[1,0,0,0],[1,0,0,1]],
        [[1,0,0,0],[1,0,1,0]],
        [[1,0,1,1],[1,0,1,0]],
        [[1,0,1,1],[1,0,0,1]],
        [[1,0,1,1],[0,0,1,1]],

        [[0,0,0,0],[0,0,0,1]],
        [[0,0,0,0],[0,0,1,0]],
        [[0,0,0,0],[0,1,0,0]],
        [[0,0,0,1],[0,0,1,1]],
        [[0,0,0,1],[0,1,0,1]],
        [[0,0,1,0],[0,0,1,1]],
        [[0,0,1,0],[0,1,1,0]],
        [[0,1,0,0],[0,1,0,1]],
        [[0,1,0,0],[0,1,1,0]],
        [[0,1,1,1],[0,1,1,0]],
        [[0,1,1,1],[0,1,0,1]],
        [[0,1,1,1],[0,0,1,1]],

        [[0,0,0,1],[0,0,1,1]],
        [[0,0,0,1],[0,1,0,1]],
        [[0,0,0,1],[1,0,0,1]],
        [[0,0,1,1],[0,1,1,1]],
        [[0,0,1,1],[1,0,1,1]],
        [[0,1,0,1],[0,1,1,1]],
        [[0,1,0,1],[1,1,0,1]],
        [[1,0,0,1],[1,0,1,1]],
        [[1,0,0,1],[1,1,0,1]],
        [[1,1,1,1],[1,1,0,1]],
        [[1,1,1,1],[1,0,1,1]],
        [[1,1,1,1],[0,1,1,1]],

        [[0,0,1,0],[0,0,1,1]],
        [[0,0,1,0],[0,1,1,0]],
        [[0,0,1,0],[1,0,1,0]],
        [[0,0,1,1],[0,1,1,1]],
        [[0,0,1,1],[1,0,1,1]],
        [[0,1,1,0],[0,1,1,1]],
        [[0,1,1,0],[1,1,1,0]],
        [[1,0,1,0],[1,0,1,1]],
        [[1,0,1,0],[1,1,1,0]],
        [[1,1,1,1],[1,1,1,0]],
        [[1,1,1,1],[1,0,1,1]],
        [[1,1,1,1],[0,1,1,1]],

        [[0,1,0,0],[0,1,0,1]],
        [[0,1,0,0],[0,1,1,0]],
        [[0,1,0,0],[1,1,0,0]],
        [[0,1,0,1],[0,1,1,1]],
        [[0,1,0,1],[1,1,0,1]],
        [[0,1,1,0],[0,1,1,1]],
        [[0,1,1,0],[1,1,1,0]],
        [[1,1,0,0],[1,1,0,1]],
        [[1,1,0,0],[1,1,1,0]],
        [[1,1,1,1],[1,1,1,0]],
        [[1,1,1,1],[1,1,0,1]],
        [[1,1,1,1],[0,1,1,1]],

        [[1,0,0,0],[1,0,0,1]],
        [[1,0,0,0],[1,0,1,0]],
        [[1,0,0,0],[1,1,0,0]],
        [[1,0,0,1],[1,0,1,1]],
        [[1,0,0,1],[1,1,0,1]],
        [[1,0,1,0],[1,0,1,1]],
        [[1,0,1,0],[1,1,1,0]],
        [[1,1,0,0],[1,1,0,1]],
        [[1,1,0,0],[1,1,1,0]],
        [[1,1,1,1],[1,1,1,0]],
        [[1,1,1,1],[1,1,0,1]],
        [[1,1,1,1],[1,0,1,1]],
        ])*size - (size/2)
    transformation_matrix = lambda xy,xz,xw,yz,yw,zw: (
    np.array([[np.cos(xy),-np.sin(xy),0,0],[np.sin(xy),np.cos(xy),0,0],[0,0,1.0,0],[0,0,0,1]])
    @np.array([[1,0,0,0],[0,np.cos(yz),-np.sin(yz),0],[0,np.sin(yz),np.cos(yz),0],[0,0,0,1]])
    @np.array([[np.cos(xz),0,np.sin(xz),0],[0,1,0,0],[-np.sin(xz),0,np.cos(xz),0],[0,0,0,1]])
    @np.array([[np.cos(xw),0,0,-np.sin(xw)],[0,1,0,0],[0,0,1,0],[np.sin(xw),0,0,np.cos(xw)]])
    @np.array([[1,0,0,0],[0,np.cos(yw),0,-np.sin(yw)],[0,0,1,0],[0,np.sin(yw),0,np.cos(yw)]])
    @np.array([[1,0,0,0],[0,1,0,0],[0,0,np.cos(zw),-np.sin(zw)],[0,0,np.sin(zw),np.cos(zw)]])
    ).T

    P_matrix = transformation_matrix(*angular_rot_speed)
    
    while run:
        win.fill((0,0,0))
        for event in pg.event.get():
            if event.type == pg.QUIT:
                run = False
        #### computation ####
        for i in range(len(edges)):
            edges[i,0] = edges[i,0]@P_matrix
            edges[i,1] = edges[i,1]@P_matrix
        #### drawing #####
        for edge in edges:
            pg.draw.line(win,(255,255,255),edge[0,:2]+ np.array([WIDTH//2,HEIGH//2]) ,edge[1,:2]+ np.array([WIDTH//2,HEIGH//2]) )
        
        ### delay ###
        pg.time.delay(10)
        pg.display.update()


if __name__ == '__main__':
    visualisation()